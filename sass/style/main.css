@charset "UTF-8";
.btn-primary {
  background-color: #337ab7;
  color: #fff;
  border: 1px solid #2e6da4; }

/*定义全局变量(在选择器、函数、混合宏...的外面定义的变量为全局变量)*/
.block {
  color: orange; }

em a {
  color: red; }

span {
  color: orange; }

/*选择器嵌套*/
nav a {
  color: red; }
  header nav a {
    color: green; }

/*属性嵌套*/
.box_01 {
  border-top: 1px solid red;
  border-bottom: 1px solid green;
  width: 100px;
  height: 100px; }

/*伪元素嵌套*/
.clearfix:before, .clearfix:after {
  content: "";
  display: table; }
.clearfix:after {
  clear: both;
  overflow: hidden; }

/*声明混合宏 @mixin 是用来声明混合宏的关键词*/
button {
  -webkit-border-radius: 5px;
  border-radius: 5px; }

/*不带参数混合宏*/
.box_02 {
  width: 100px;
  height: 100px;
  background-color: yellow;
  -webkit-border-radius: 3px;
  border-radius: 3px; }

/*带参数混合宏*/
.btn, .btn-primary, .btn-second {
  -webkit-border-radius: 6px;
  border-radius: 6px; }

/*[Sass]混合宏的参数--传多个参数*/
.box-center {
  width: 500px;
  height: 300px;
  position: absolute;
  background-color: red;
  top: 50%;
  left: 50%;
  margin-top: -150px;
  margin-left: -250px; }

/*继承*/
.btn, .btn-primary, .btn-second {
  border: 1px solid #ccc;
  padding: 6px 10px;
  font-size: 14px; }

.btn-primary {
  background-color: #f36;
  color: #fff; }

.btn-second {
  background-color: orange;
  color: #fff; }

/*%placecholder占位符*/
/*不被@extend调用的话，不会产生代码*/
.btn, .btn-primary, .btn-second, .block {
  margin-top: 5px; }

.btn, .btn-primary, .btn-second, .block span {
  padding-top: 5px; }

/*被@extend调用，产生代码*/
.login-box {
  margin-top: 14px;
  padding-top: 14px; }

/*当你想设置属性值的时候你可以使用字符串插入进来。另一个有用的用法是构建一个选择器。*/
.header-text-small {
  font-size: 12px; }

.header-text-medium {
  font-size: 20px; }

.header-text-big {
  font-size: 40px; }

/*可以动态的插入 .class 和 %placeholder。当然他们不能接受像 mixin 这样的参数*/
.navigation {
  margin-top: 20px;
  background: #F00; }

.selected-status, .navigation {
  font-weight: bold; }

/*除法运算*/
p {
  font: 10px/8px;
  width: 500px;
  width: 1;
  height: 250px;
  margin-left: 9px;
  width: 10; }

/*变量计算*/
.container {
  width: 960px;
  margin: 0 auto; }

/*颜色计算 计算公式为 01 + 04 = 05、02 + 05 = 07 和 03 + 06 = 09*/
p {
  color: #050709; }

/*字符运算*/
.box:before {
  content: " HelloSass! "; }

div {
  cursor: e-resize; }

p:before {
  content: "Foo Bar";
  font-family: sans-serif; }

/*@if @else*/
.block {
  display: block; }

.hidden {
  display: none; }

/*for循环,关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数*/
.item-1 {
  width: 2em; }

.item-2 {
  width: 4em; }

.item-3 {
  width: 6em; }

.item-1 {
  width: 2em; }

.item-2 {
  width: 4em; }

/*@for应用在网格系统生成各个格子 class 的代码：*/
.span1, .span2, .span3, .span4, .span5, .span6, .span7, .span8, .span9, .span10, .span11, .span12 {
  float: left;
  margin-left: 10px;
  margin-right: 10px; }

.span1 {
  width: 60px; }

.span2 {
  width: 140px; }

.span3 {
  width: 220px; }

.span4 {
  width: 300px; }

.span5 {
  width: 380px; }

.span6 {
  width: 460px; }

.span7 {
  width: 540px; }

.span8 {
  width: 620px; }

.span9 {
  width: 700px; }

.span10 {
  width: 780px; }

.span11 {
  width: 860px; }

.span12 {
  width: 940px; }

/*while循环*/
.while-4 {
  width: 24px; }

.while-3 {
  width: 23px; }

.while-2 {
  width: 22px; }

.while-1 {
  width: 21px; }

/*each循环*/
.author-bio .photo-adam {
  background: url("/images/avatars/adam.png") no-repeat; }
.author-bio .photo-john {
  background: url("/images/avatars/john.png") no-repeat; }
.author-bio .photo-wynn {
  background: url("/images/avatars/wynn.png") no-repeat; }
.author-bio .photo-mason {
  background: url("/images/avatars/mason.png") no-repeat; }
.author-bio .photo-kuroir {
  background: url("/images/avatars/kuroir.png") no-repeat; }

/*unquote函数*/
.test1 {
  content: Hello Sass!; }

.test2 {
  content: 'Hello Sass!'; }

.test5 {
  content: "Hello Sass!"; }

.test6 {
  content: Hello Sass; }

/*字符串函数-quote()函数*/
.test1 {
  content: "Hello Sass!"; }

.test2 {
  content: "Hello Sass!"; }

/*To-upper-case()小转大,To-lower-case()大转小*/
.test {
  text: aa-aaaa-aaa;
  text: AA-AAAA-AAA; }

/*
	  percentage($value)：将一个不带单位的数转换成百分比值；
	  round($value)：将数值四舍五入，转换成一个最接近的整数；
	  ceil($value)：将大于自己的小数转换成下一位整数；
	  floor($value)：将一个数去除他的小数部分；
	  abs($value)：返回一个数的绝对值；
	  min($numbers…)：找出几个数值之间的最小值；
	  max($numbers…)：找出几个数值之间的最大值；
	  random(): 获取随机数
*/
.box_04 {
  width: 50%;
  width: 20%;
  width: 12;
  width: 2%;
  width: 0;
  width: 1;
  width: 3;
  width: 10em;
  width: 10px;
  width: 10;
  width: 1%;
  width: 5px;
  width: 0.66555; }

/*
	1.length($list)：返回一个列表的长度值；
	length(10px 20px (border 1px solid) 2em)  4

	2.nth($list, $n)：返回一个列表中指定的某个标签值
	 nth(10px 20px 30px,1)  10px

	3.join($list1, $list2, [$separator])：将两个列给连接在一起，变成一个列表；
	join((blue,red),(#abc #def))  (#0000ff, #ff0000, #aabbcc, #ddeeff)
	
	4.append($list1, $val, [$separator])：将某个值放在列表的最后；
	append((10px,20px),30px) (10px, 20px, 30px)
	
	5.zip($lists…)：将几个列表结合成一个多维的列表；每个单一的列表个数值必须是相同的
	 zip(1px 2px 3px,solid dashed dotted,green blue red)
	 ((1px "solid" #008000), (2px "dashed" #0000ff), (3px "dotted" #ff0000))
	
	6.index($list, $value)：返回一个值在列表中的位置值。
	 index(1px solid red, 1px) 1
*/
/*Maps的函数-map-get($map,$key)*/
.btn-dribble {
  color: #3b5998; }

/* Maps的函数-map-has-key($map,$key),参数写错了的话会有提示*/
.btn-dribble {
  color: #ea4c89; }

.btn-facebook {
  color: #3b5998; }

.btn-github {
  color: #171515; }

.btn-google {
  color: #db4437; }

.btn-twitter {
  color: #55acee; }

/*map-keys($map)*/
/*weibo 不在 $social-color s中，那么不会编译出 CSS*/
/*可以通过 @each 或者 @for 遍历出所有值*/
.btn-dribble {
  color: #ea4c89; }

.btn-facebook {
  color: #3b5998; }

.btn-github {
  color: #171515; }

.btn-google {
  color: #db4437; }

.btn-twitter {
  color: #55acee; }

/*@media*/
.sidebar {
  width: 300px; }
  @media screen and (orientation: landscape) {
    .sidebar {
      width: 500px; } }

/*@media 也可以嵌套 @media：*/
@media screen and (orientation: landscape) {
  .sidebar {
    width: 500px; } }

/*# sourceMappingURL=main.css.map */
